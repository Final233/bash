#指定运行worker进程的用户和组；user nginx nginx 可不设置
user nginx nginx;
#worker进程的个数；通常应该略少于CPU物理核心数；
#通常值为物理CPU核心数-1或-2
#常用
worker_processes auto;
#cpu 亲和力配置，让不同的进程使用不同的 cpu
#一个CPU核心只运行一个NGINX进程，一个进程专用一个CPU核心
#优点：提升缓存的命中率；
#常用
worker_cpu_affinity 0001 0010 0100 1000;
#最大文件打开数（连接），可设置为系统优化后的 ulimit -HSn 的结果
#指定所有worker进程所能够持开的最大文件句柄数；
worker_rlimit_nofile 51200;
#减少计时器解析度的值 < 间隔 >。
#解析次数越高，精度越高，资源消耗越大，
#解析次数越低，精度越低，若要求不是特别是高的话，可减少解析数
#timer_resolution 间隔; 可减少 gettimeofday() 系统调用的次数;
#调低 worker 线程的 nice 值, 提高优先级。#必须时，可降低
#worker_priority -10;        指明 worker 进程的 nice 值;
#错误日志存放目录
#error_log  /var/log/nginx/error_log;
#访问日志存放目录
#access_log /var/log/nginx/access_log;
#指定nginx守护进程的pid文件
#pid        /var/run/nginx/nginx.pid;
#工作模式及连接数上限
events {
#epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式, 但是仅用于 linux2.6 以上内核, 可以大大提高 nginx 的性能
    use epoll;
#单个后台 worker process 进程的最大并发链接数
    worker_connections  51200;
}

http {
#加载配置文件
#include /usr/loca/nginx/conf/lvs.conf;
####
#隐藏响应 header 和错误通知中的版本号
	  server_tokens off;
#文件扩展名与类型映射表
    include       mime.types;
#limit 模块，可防范一定量的 DDOS 攻击
#用来存储 session 会话的状态，如下是为 session 分配一个名为 one 的 10M 的内存存储区，限制了每秒只接受一个 ip 的一次请求 1r/s
#    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
#    limit_conn_zone $binary_remote_addr zone=addr:10m;
#默认文件类型
    default_type  application/octet-stream;
    log_format  main    '$server_addr $remote_addr [$time_local] $msec+$connection'
                        '"$request" $status $connection $request_time $body_bytes_sent "$http_referer"'
                        '"$http_user_agent" "$http_x_forwarded_for"';
    open_log_file_cache max=1000 inactive=20s min_uses=1 valid=1m;
    access_log /var/log/nginx/access_log main;
    log_not_found on;
#开启高效传输模式
    sendfile        on;
#将小的包合并成一个包
#激活 tcp_nopush 参数可以允许把 httpresponse header 和文件的开始放在一个文件里发布，
#积极的作用是减少网络报文段的数量
#选项仅在使用 sendfile 的时候才开启。
#socket 有包就发，管他大小，很直接暴力。
#官方#将 tcp_nopush指令与指令一起使用。这使得 NGINX 可以在获得数据块之后立即在一个数据包中发送 HTTP 响应头。sendfile on;sendfile()
   tcp_nopush     on;
#激活 tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高 I/O 性能
#官方#该 tcp_nodelay指令允许覆盖 Nagle 的算法，该算法最初设计用于解决慢速网络中小数据包的问题。该算法将许多小数据包合并为一个较大的数据包，并以200 ms 延迟发送数据包。如今，在提供大型静态文件时，无论数据包大小如何，都可以立即发送数据。延迟也会影响在线应用程序（ssh，在线游戏，在线交易等）。默认情况下，tcp_nodelay指令设置为on，这意味着禁用 Nagle 的算法。仅将此指令用于 keepalive 连接：
#Nagle 和 DelayedAcknowledgment 的延迟问题
#Nagle：假如需要频繁的发送一些小包数据，比如说 1 个字节，以 IPv4 为例的话，则每个包都要附带 40 字节的头，也就是说，总计 41 个字节的数据里，其中只有 1 个字节是我们需要的数据。
#为了解决这个问题，出现了 Nagle 算法。它规定：如果包的大小满足 MSS，那么可以立即发送，否则数据会被放到缓冲区，等到已经发送的包被确认了之后才能继续发送。通过这样的规定，可以降低网络里小包的数量，从而提升网络性能。
#DelayedAcknowledgment：假如需要单独确认每一个包的话，那么网络中将会充斥着无数的 ACK，从而降低了网络性能。为了解决这个问题，DelayedAcknowledgment 规定：不再针对单个包发送 ACK，而是一次确认两个包，或者在发送响应数据的同时捎带着发送 ACK，又或者触发超时时间后再发送 ACK。通过这样的规定，可以降低网络里 ACK 的数量，从而提升网络性能。
#Nagle 和 DelayedAcknowledgment 虽然都是好心，但是它们在一起的时候却会办坏事
#tcp_nodelay 为什么只在 keep-alive 才启作用
#启用 Nagle 算法 小包来了，一直等着，直到凑成满的才发。到数据流的最后一段了，nginx 直接去掉了 tcp_nopush，最后一个小包立刻就发出去了，就避免了 200ms 的一个延迟。
#将多个小的包合并成一个报文
#关闭则影响用户体验，延迟
    tcp_nodelay on;
#开启 gzip 压缩功能
    gzip  on;
#设置允许压缩的页面最小字节数，页面字节数从 header 头的 Content-Length 中获取。默认值是 0，表示不管页面多大都进行压缩。建议设置成大于 1K。如果小于 1K 可能会越压越大。
    gzip_min_length  1k;
#压缩缓冲区大小。表示申请 4 个单位为 16K 的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储 gzip 压缩结果。
    gzip_buffers     4 16k;
#压缩版本（默认 1.1，前端为 squid2.5 时使用 1.0）用于设置识别 HTTP 协议版本，默认是 1.1，目前大部分浏览器已经支持 GZIP 解压，使用默认即可。
#    gzip_http_version 1.0;
#压缩比率。用来指定 GZIP 压缩比，1 压缩比最小，处理速度最快；9 压缩比最大，传输速度快，但处理最慢，也比较消耗 cpu 资源。
    gzip_comp_level 6;
#用来指定压缩的类型，“text/html” 类型总是会被压缩
    gzip_types       text/plain application/x-javascript text/css application/xml;
#连接超时时间，单位是秒
#vary header 支持。该选项可以让前端的缓存服务器缓存经过 GZIP 压缩的页面，例如用Squid 缓存经过 Nginx 压缩的数据。
    gzip_vary off;
#开启 ssi 支持，默认是 off
#  ssi on;
#  ssi_silent_errors on;
#长连接的超时时长，默认75
    keepalive_timeout  60;
#在一个长连接上所能够驴行请求的最大资源数
#keepalive_requests 
#设置日志模式
#反向代理负载均衡设定部分
#upstream 表示负载服务器池，定义名字为 backend_server 的服务器池
upstream back_server {
#设置由 fail_timeout 定义的时间段内连接该主机的失败次数，以此来断定 fail_timeout 定义的时间段内该主机是否可用。默认情况下这个数值设置为 1。零值的话禁用这个数量的尝试。
#设置在指定时间内连接到主机的失败次数，超过该次数该主机被认为不可用。
#这里是在 30s 内尝试 2 次失败即认为主机不可用！
    server   192.168.2.100:80 weight=1 max_fails=2 fail_timeout=30s;
    server   192.168.2.101:80 weight=1 max_fails=2 fail_timeout=30s;
#    server   192.168.2.102:80 weight=1 max_fails=2 fail_timeout=30s;
#    server   192.168.2.103:80 weight=1 max_fails=2 fail_timeout=30s;
    }
#基于域名的虚拟主机
    server{
          listen 80; #监听端口
#          server_name www.back_servers.com;
#          location / {
#          root html; #站点根目录，即网站程序存放目录
#          index index.php index.html; #首页排序
#          }
          
      location / {
          proxy_pass http://back_server; 
          #允许将字段重新定义或附加到传递给代理服务器的请求标头该value可以包含文本，变量，以及它们的组合。
          #当且仅当proxy_set_header在当前级别上没有定义指令时，这些指令才从先前级别继承
          proxy_set_header Host $host; #记录客户端的主机，不记录代理服务器的主机       
          proxy_set_header X-Real-IP $remote_addr ; #记录客户端的IP地址，不记录代理服务器的IP
          #proxy_cache_path path [levels=levels] keys_zone=name:size [Inactive=time] [max size=size]
          #在http{} 缓存存放路径 levels参数定义高速缓存的层次结构级别：从1到3，每个级别接受值1或2. 缓存名字和内存空间大小 缓存的数据超过1天没有被访问就自动清除 访问的缓存数据,硬盘缓存空间大小为10G
          #proxy_cache_path /nginx/cache levels=1:2 keys_zone=mycache:500m inactive=1d max_size=10g;
          #proxy_cache mycache; #设置缓存名称
          #响应码缓存的时间
          #proxy_cache_valid [code] time;
          #proxy_cache_valid 200 1d;
          #proxy_cache_valid 301 302 10m;
          #proxy_cache_valid any 1m; 
          #如果此指令中列出了客户端请求方法，则将缓存响应。
          #设置缓存哪些 HTTP 方法, 默认缓存 HTTP GET/HEAD 方法, 不缓存 HTTP POST 方法
          ##proxy_cache_method GET | HEAD | POST
          #确定在与代理服务器通信期间可以在哪些情况下使用过时的缓存响应
          #error如果无法选择代理服务器来处理请求，则该参数还允许使用陈旧的缓存响应。
          #此外，updating如果当前正在更新，该参数允许使用过时的缓存响应。这允许在更新缓存数据时最小化对代理服务器的访问次数
          ##proxy_cache_use_stale error timeout
          #某响应被请求多少次后，才清除缓存
          ##proxy_cache_min_uses number
          #定义不从缓存中获取响应的条件。如果字符串参数的至少一个值不为空且不等于 “0”，则不会从缓存中获取响应：
          #设置在何种情形下nginx将不从cache取数据的；
          ##proxy_cache_bypass string
#          }
#防盗链          
#      location ~* `\.(jpg|gif|jpeg|png$) {
#          valid_referer none blocked www.test.com;
#          if ($invalid_referer) {
#          rewrite ^/ http://www.test.com/403.html;
#        }
#      }
#启用php
# 		  location ~ \.php$ {
#          root           html;
#          fastcgi_pass   192.168.2.254:9000; #监听本机 9000 端口
#          fastcgi_index  index.php; #设定动态首页
#若访问php页面not found 修改下面的选项
#          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#          include        fastcgi_params;
#}
#若php服务分离出来，需要把访问问点目录所有者、所属组改成apache
### grep apache /etc/php-fpm.d/www.conf 
###user = apache
###group = apache
###php监听IP和端口
###grep 192.168.2.254 /etc/php-fpm.d/www.conf
###listen = 192.168.2.254:9000
###php允许监听的IP
###grep 192.168.2.100 /etc/php-fpm.d/www.conf
###listen.allowed_clients = 192.168.2.100
#          location ~ \.php$ {
#          fastcgi_pass   192.168.2.254:9000;
#          fastcgi_index  index.php;
#          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#          include        fastcgi_params;
#                }          
##add by 20140321#######nginx 防 sql 注入 ##########

		  }
		  
#		  location ~ ^/admin.php {
#            location ~ \.php$
#             {
#              fastcgi_pass  127.0.0.1:9000;
#              fastcgi_index index.php;
#              include fcgi.conf;
#             }
#            allow   192.168.2.254;
#            deny    all; #禁止其他 ip 访问
#            }

      location /yum {
          access_log off;
          autoindex on;   #开启 nginx 目录浏览功能
          autoindex_exact_size off;   #文件大小从 KB 开始显示
          autoindex_localtime on;   #显示文件修改时间为服务器本地时间
      }
#将符合 js,css 文件的等设定 expries 缓存参数，要求浏览器缓存。
      #location~ .*\.(js|css)?$ {
      # expires      30d; #客户端缓存上述 js,css 数据 30 天
      #}
}
    server {
          listen 8888;
          server_name nginx-status;
          location / {
          access_log off;
          deny all;
          return 503;
          }
          location /status {
          stub_status on;
          access_log off;
	   	  #error_page 404 =200 /404.html;
		    #auth_basic "welcome vip";
		    #建立认证
		    #auth_basic_user_file /etc/nginx/users/.htpasswd;
		    allow 127.0.0.1;
		    allow 192.168.2.0/24;
		    access_log off; #不记录访问日志
		    deny all; #拒绝所有用户
			   }
      }

#HTTPS server
#  server {
#      listen       443 ssl;
#      server_name  www.test.com;
#     charset utf-8; #gbk,utf-8,gb2312,gb18030 可以实现多种编码识别
#      ssl_certificate      /etc/nginx/ssl/nginx.crt; #服务的证书
#      ssl_certificate_key  /etc/nginx/ssl/nginx.key; #服务端 key
#      ssl_session_cache    shared:SSL:1m;
#      ssl_session_timeout  5m;#session 超时时间
#      ssl_ciphers  HIGH:!aNULL:!MD5;#加密算法
      #ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; 
#      ssl_prefer_server_ciphers  on;#启动加密算法
#      #access_log /var/log/nginx/acess_log;
#      #error_log /var/log/nginx/error_log;
  
#      location / {
#            root   html;
#            index  index.html index.htm;
#        }
#  }
}
